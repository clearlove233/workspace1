在java中内存：栈和堆都是一块内存空间。
栈：容量小，存取速度快，适合生命周期短的数据；存储局部变量，特点：先进后出
堆：容量大，存取速度慢，适合生命周期长的数据；存储对象。

匿名对象是无意义的，因为在栈中没有一个变量对他做引用，很快会被垃圾回收器回收，在实际开发中要尽量避免。

this关键字：1.只能在类的对象方法中使用，2.this 代表当前调用这个this 所在方法的对象的自身。3.可以在方法区内区分同名的类
的属性和参数名。
super关键字：1.子类实例化的过程中父类构造器先被调用。2.子类通过构造器实例化时要调用父类的默认构造器，隐含调用super（）
这个方法。（无参）3.super（）的调用放在方法的第一行。4.super可以表示父类的引用，可用super和this来区分父类子类中同名的
属性。

设计模式：
1.单例模式：在单例类的内部创造一个自己本身的对象；
			构造器的私有化；
			获得单例的对象；
2.模板模式：（抽象）必须要实现的一个业务方法；（abstract）
			定义一个可重写可不重写的方法
			必须不能被重写的方法
			模板方法，供其他类来使用
			（具体）实现具体的业务逻辑
			
final关键字：final修饰的方法不能重写；final修饰在属性上不能被改变（常量）；final修饰的类不可以被继承。
finally 和try catch 异常处理模块一同使用，在最后一定会被执行
finalize 当堆中的对象没有任何引用时这个方法会被调用来做垃圾回收

string str=“helloworld”在数据共享区创建的是一个对象
string str1=new string（“helloworld”）在堆中创建一个字符串对象，在数据共享区中创建一个字符串的常量的对
象，然后把堆中的对象指向数据共享区的对象。

迭代器只能使用一次，在遍历过程中不能对集合元素进行修改，若修改，会出现并发的错误。

Collection：
List：（元素可以为空，可以重复，有序）
1.ArrayList: 长度不固定；不是线程安全的（同步）；效率高。
2.LinkedList；队列、链表、堆栈。 不是线程安全的。安全的。
3.Vector ：线性安全
Set：
1.HashSet ：无序,元素不可以重复，最多包含一个null元素，不是线程安全的（效率高）
2.LinkedHashSet:有迭代顺序，元素不可以重复，最多包含一个null元素，不是线程安全的（效率高）
3.TreeSet:可自定义排序，元素唯一性，不是线程安全的


运行速度快慢为：StringBuilder > StringBuffer > String
线程安全：在线程安全上，StringBuilder是线程不安全的，而StringBuffer是线程安全的
String：适用于少量的字符串操作的情况
StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况
StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况

foreach在循环中添加，会出现并发问题。

判断两个对象是否相等，必须要重写equals 和 hashcode 方法，这两个方法都相等才认为是
两个相等的对象。



